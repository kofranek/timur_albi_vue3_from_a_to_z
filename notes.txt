1. založení projektu
*********************************************
npm install -g @vue/cli
případně
npm update -g @vue/cli
vue --version

vue create . nebo: vue create adresář

v /public upravíme index.html na minimum
<!DOCTYPE html>
        <html lang="">
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width,initial-scale=1.0">
            <title>Vue 3 course</title>
          </head>
          <body>
            <div id="app"></div>
            <!-- built files will be auto injected -->
          </body>
        </html>

v src necháme pouze main.js
        import { createApp } from 'vue'
        createApp(App).mount('#app')

*********************************************************
2. Komponenta App, interpolace, posluchači událostí
*******************************************************
v main.js
        import { createApp } from 'vue'
        import App from './App'
        createApp(App).mount('#app')
v src vytvoříme App.vue:
        <template>
        </template>

        <script>
          export default {
          name: "App",
        </script>

        <style scoped>
        </style>

interpolace: {{proměnná či výraz }} zobrazení hodnoty v sekci template

        <div>likes count: <strong> {{ likes }}</strong></div>
        <div>dislikes count: <strong> {{ dilikes }}</strong></div>

v template vytvoříme strukturu komponenty:
    <template>
      <div>
        <button v-on:click="addLike">like</button>
        <button v-on:click="addDislike">dislike</button>
      </div>
      <div>
        <div>likes count: <strong> {{ likes }}</strong></div>
        <div>dislikes count: <strong> {{ dilikes }}</strong></div>
      </div>
    </template>

v <script> vytvoříme datové elementy a metody:

        <script>
        export default {
          name: "App",
          data() {
            return {
              likes: 0,
              dislikes: 0,
            }
          },
          methods: {
            addLike() {
              this.likes++
            },
            addDislike() {
              this.dislikes++
            },
          },
        }
        </script>

*********************************************************
3. Styly
*********************************************************

pokud chceme ovlivnit template (kde je použita třída "post"):

    <template>
      <div class="post">
        <div><strong>Název:</strong>Poznámka o JavaScriptu</div>
        <div><strong>Popis:</strong>JavaScript je univerzální programovací jazyk</div>
      </div>
      <div class="post">
        <div><strong>Název:</strong>Poznámka o JavaScriptu</div>
        <div><strong>Popis:</strong>JavaScript je univerzální programovací jazyk</div>
      </div>
      <div class="post">
        <div><strong>Název:</strong>Poznámka o JavaScriptu</div>
        <div><strong>Popis:</strong>JavaScript je univerzální programovací jazyk</div>
      </div>
    </template>

můžeme v sekci <style> uvést styly, které budou uplatněny v tomto a všech dceřinných komponentech:

    <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    .post {
      padding: 15px;
      border: 2px solid teal;
      margin-top: 15px;
    }
    </style>

pokud je sekce označena klíčovým slovem "scoped" styly se týkají jen dané komponenty
    <style scoped>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    .post {
      padding: 15px;
      border: 2px solid teal;
      margin-top: 15px;
    }
    </style>

*********************************************************
4. Vykreslování v cyklu - direktiva v-for
*********************************************************
v <template> vytvoříme cyklus v-for, kde iterujeme položku post v pole posts:

    <template>
      <div class="post" v-for="post in posts" >
        <div><strong>{{post.title}}</strong> {{post.body}}</div>
      </div>
    </template>

poznámka: správně bychom měli ke každé položce dát unikátní klíč "key":

v <script> v sekci data definujeme pole posts:
    data() {
        return {
          posts:[
            {id: 1, title: 'Hlavička dopisu 1', body: 'Obsah dopisu 1'},
            {id: 2, title: 'Hlavička dopisu 2', body: 'Obsah dopisu 2'},
            {id: 3, title: 'Hlavička dopisu 3', body: 'Obsah dopisu 3'},
            {id: 4, title: 'Hlavička dopisu 4', body: 'Obsah dopisu 4'},
          ]
        }
      },

********************************************************
5. Přidání nové položky
*********************************************************
V template vytvoříme formulář s dvěma vstupy a tlačítkem-
ve formuláři změníme klasické chování událosit submit (po stisku tlačíka),
které vede k obnovení stránky:
 <div class="app"
    <form @submit.prevent>
      <h4>Vytvoření položky</h4>
      <input class="input"
             type="text"
             placeholder="Název"
             v-bind:value="title"
             @input="inputTitle"
      >
      <input class="input"
             type="text"
             placeholder="Obsah"
             v-bind:value="body"
             @input="inputBody"
      >
      <button class="btn"
              @click.prevent="createPost"
      >
        Vytvořit položku
      </button>
    </form>
 </div>

V <input> máme dvě vazby:
jednou vazbou vstup propojíme s hodnotou proměnné title (resp body):
    v-bind:value="title"
    v-bind:value="body"

tyto proměnné vytvoříme v sekci data:
  data() {
    return {
      posts: [
        {id: 1, title: 'Hlavička dopisu 1', body: 'Obsah dopisu 1'},
        {id: 2, title: 'Hlavička dopisu 2', body: 'Obsah dopisu 2'},
        {id: 3, title: 'Hlavička dopisu 3', body: 'Obsah dopisu 3'},
        {id: 4, title: 'Hlavička dopisu 4', body: 'Obsah dopisu 4'},
      ],
      title: '',
      body: ''
    }
  },

tato vazba způsobí, že jakmile zmeníme hotnotu v proměnných title nebo body,
okamžitě se to projeví ve formulářových položkách input

Druhou vazbou propojíme událost input s obslužnými procedurami:
    @input="inputTitle"
    @input="inputBody"

v sekci method k nim napíšeme obslužné procedury:

    inputTitle(event) {
      this.title = event.target.value
    },
    inputBody(event) {
      this.body = event.target.value
    }

Obslužné procedury inputTitle a inputBody můžeme zaměnit přímým volání při
obsluze události @input:

            <input class="input"
                   type="text"
                   placeholder="Název"
                   v-bind:value="title"
                   @input="title=$event.target.value"
            >
            <input class="input"
                   type="text"
                   placeholder="Obsah"
                   v-bind:value="body"
                   @input="body=$event.target.value"
            >

Obsluha události tlačítka: událost click v tlačítku propojíme
s procedurou createPost

      <button class="btn" @click.prevent="createPost">
        Vytvořit položku
      </button>

   obslužná procedura createPost() přidá položku do pole posts:

    createPost() {
        const newPost = {
        id: Date.now(),
        title: this.title,
        body: this.body,
      }
        this.posts.push(newPost)
        this.title = ''
        this.body = ''
    },

Nesmíme zspomenout změnit ve formuláři form klasické chování událosit submit,
které vede k obnovení stránky:
        <form @submit.prevent>

Nakonec upravíme styly:

    <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    .post {
      padding: 15px;
      border: 2px solid teal;
      margin-top: 15px;
    }

    .app {
       padding: 20px;
    }
    form {
      display: flex;
      flex-direction: column;
    }

    .btn {
      margin-top: 15px;
      align-self: flex-end;
      padding: 10px 15px;
      background: none;
      color: teal;
      border: 1px solid teal;
    }

    .input {
      width: 100%;
      border: 1px solid feal;
      padding: 10px 15px;
      margin-top: 15px;
    }
    </style>

********************************************************
6. Dekompozice, vytvoření znovupoužitelných komponent
*********************************************************

Vytvoříme novou složku ./src/components

a v ní komponenty PostForm a PostList

v rodičovském pomponentu App vyřežeme příslušné položky z <template> a přeneseme
je do kopmonent PostForm a PostList

Obdobně s App přeneseme i přislušne styly

V koponentě App tyto komponenty importujeme, a vytvoříme objekt components:

<template>
  <div class="app">
    <post-form/>
    <post-list/>
  </div>
</template>

<script>
  import PostForm from "@/components/PostForm";
  import PostList from "@/components/PostList";
  export default {
    components: {
      PostForm, PostList
    },
    ...


poznámka:
    components: {
      PostForm: PostForm,
      PostList: PostList
    },
  je totéž jako
    components: {
        PostForm, PostList
    },


********************************************************
7. Props - předávání dat do komponenty
*********************************************************

Deklarujeme Props v komponente PostList:

  <script>
  export default {
    name: "PostList",
    props: {
      posts: {
        type: Array,
        required: true
      }
    },
  }
  </script>

  Při jejím volání v rodičovské komponentě předáme jako argument pole posts

    <post-list :posts="posts "/>

V komponentě PostForm odstraníme v button reakci na udílost click
    @click.prevent="createPost"
    zpětnou vazbu na rodičovsky komponent budeme dělat jinak

    vytvoříme lokální objekt

          post: {
            title: '',
            body: ''
          }
   a v template upravíme vzájemnou vazbu na tento objekt:

       <input class="input"
              type="text"
              placeholder="Název"
              v-bind:value="post.title"
              @input="post.title = $event.target.value"
       >
       <input class="input"
              type="text"
              placeholder="Obsah"
              v-bind:value="post.body"
              @input="post.body = $event.target.value"
       >

